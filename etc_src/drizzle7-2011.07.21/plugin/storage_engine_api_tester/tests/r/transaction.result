select seapitester_clear_engine_state_history();
seapitester_clear_engine_state_history()
0
DROP TABLE IF EXISTS t1_trx, t1_non_trx;
SET AUTOCOMMIT= 0;
CREATE TABLE t1_trx (
k VARCHAR(10) NOT NULL
, v VARCHAR(10) NOT NULL
, PRIMARY KEY (k)
) ENGINE=storage_engine_api_tester;
CREATE TEMPORARY TABLE t1_non_trx (
k VARCHAR(10) NOT NULL
, v VARCHAR(10) NOT NULL
, PRIMARY KEY (k)
) ENGINE=MyISAM;
START TRANSACTION;
INSERT INTO t1_trx VALUES ('key1','value1');
INSERT INTO t1_trx VALUES ('key2','value2');
INSERT INTO t1_non_trx VALUES ('key1','value1');
INSERT INTO t1_non_trx VALUES ('key2','value2');
ROLLBACK;
Warnings:
Warning	1196	Some non-transactional changed tables couldn't be rolled back
select * from data_dictionary.seapitester_engine_state_history;
STATE
::max_supported_key_length()
::max_supported_key_parts()
::max_supported_keys()
::max_supported_key_part_length()
Cursor 1 Cursor()
::doCreateTable()
::SEAPITester()
Cursor 1 ~Cursor()
BEGIN
In Transaction
END STATEMENT
COMMIT STATEMENT
In Transaction
Cursor 2 Cursor()
Cursor 2 ::doOpen()
Cursor 2 ::store_lock()
START STATEMENT
Cursor 2 ::external_lock()
Cursor 2 locked
Cursor 2 ::doInsertRecord()
END STATEMENT
COMMIT STATEMENT
In Transaction
Cursor 2 ::external_lock()
Cursor 2 locked
Cursor 2 ::reset()
Cursor 2 ::doOpen()
Cursor 2 ::store_lock()
START STATEMENT
Cursor 2 ::external_lock()
Cursor 2 locked
Cursor 2 ::doInsertRecord()
END STATEMENT
COMMIT STATEMENT
In Transaction
Cursor 2 ::external_lock()
Cursor 2 locked
Cursor 2 ::reset()
Cursor 2 ::doOpen()
ROLLBACK
::SEAPITester()
BEGIN
In Transaction
select seapitester_clear_engine_state_history();
seapitester_clear_engine_state_history()
0
Expected warning about non-trx data changes not being rolled back
SELECT * FROM t1_trx;
k	v
SELECT * FROM t1_non_trx;
k	v
key1	value1
key2	value2
select * from data_dictionary.seapitester_engine_state_history;
STATE
Cursor 2 ::store_lock()
START STATEMENT
Cursor 2 ::external_lock()
Cursor 2 locked
Cursor 2 ::info()
Cursor 2 locked
Cursor 2 ::scan_time()
Cursor 2 locked
Cursor 2 ::scan_time()
Cursor 2 locked
Cursor 2 ::doStartTableScan()
Cursor 2 ::rnd_next()
Cursor 2 ::doEndTableScan()
Cursor 2 ::external_lock()
Cursor 2 locked
END STATEMENT
COMMIT STATEMENT
In Transaction
Cursor 2 ::reset()
Cursor 2 ::doOpen()
select seapitester_clear_engine_state_history();
seapitester_clear_engine_state_history()
0
START TRANSACTION;
Warnings:
Warning	1746	There is already a transaction in progress
INSERT INTO t1_trx VALUES ('key1','value1');
INSERT INTO t1_trx VALUES ('key2','value2');
SELECT t1_trx.k, t1_trx.v
FROM t1_trx
INNER JOIN t1_non_trx ON t1_trx.k = t1_non_trx.k;
k	v
key1	value1
key2	value2
ROLLBACK;
select * from data_dictionary.seapitester_engine_state_history;
STATE
Cursor 2 ::store_lock()
START STATEMENT
Cursor 2 ::external_lock()
Cursor 2 locked
Cursor 2 ::doInsertRecord()
END STATEMENT
COMMIT STATEMENT
In Transaction
Cursor 2 ::external_lock()
Cursor 2 locked
Cursor 2 ::reset()
Cursor 2 ::doOpen()
Cursor 2 ::store_lock()
START STATEMENT
Cursor 2 ::external_lock()
Cursor 2 locked
Cursor 2 ::doInsertRecord()
END STATEMENT
COMMIT STATEMENT
In Transaction
Cursor 2 ::external_lock()
Cursor 2 locked
Cursor 2 ::reset()
Cursor 2 ::doOpen()
Cursor 2 ::store_lock()
START STATEMENT
Cursor 2 ::external_lock()
Cursor 2 locked
Cursor 2 ::info()
Cursor 2 locked
Cursor 2 ::scan_time()
Cursor 2 locked
Cursor 2 ::scan_time()
Cursor 2 locked
Cursor 2 ::scan_time()
Cursor 2 locked
Cursor 2 ::doStartIndexScan()
Cursor 2 ::index_read()
Cursor 2 ::doStartIndexScan()
Cursor 2 ::index_read()
Cursor 2 ::doStartIndexScan()
Cursor 2 ::doEndIndexScan()
Cursor 2 locked
Cursor 2 ::external_lock()
Cursor 2 locked
END STATEMENT
COMMIT STATEMENT
In Transaction
Cursor 2 ::reset()
Cursor 2 ::doOpen()
ROLLBACK
::SEAPITester()
BEGIN
In Transaction
select seapitester_clear_engine_state_history();
seapitester_clear_engine_state_history()
0
SELECT t1_trx.k, t1_trx.v
FROM t1_trx
INNER JOIN t1_non_trx ON t1_trx.k = t1_non_trx.k;
k	v
COMMIT;
DROP TABLE t1_trx;
DROP TABLE t1_non_trx;
select * from data_dictionary.seapitester_engine_state_history;
STATE
Cursor 2 ::store_lock()
START STATEMENT
Cursor 2 ::external_lock()
Cursor 2 locked
Cursor 2 ::info()
Cursor 2 locked
Cursor 2 ::scan_time()
Cursor 2 locked
Cursor 2 ::scan_time()
Cursor 2 locked
Cursor 2 ::scan_time()
Cursor 2 locked
Cursor 2 ::doStartIndexScan()
Cursor 2 ::index_read()
Cursor 2 ::doStartIndexScan()
Cursor 2 ::index_read()
Cursor 2 ::doStartIndexScan()
Cursor 2 ::doEndIndexScan()
Cursor 2 locked
Cursor 2 ::external_lock()
Cursor 2 locked
END STATEMENT
COMMIT STATEMENT
In Transaction
Cursor 2 ::reset()
Cursor 2 ::doOpen()
COMMIT
::SEAPITester()
Cursor 2 ::close()
Cursor 2 Cursor()
Cursor 2 ~Cursor()
BEGIN
In Transaction
select seapitester_clear_engine_state_history();
seapitester_clear_engine_state_history()
0
